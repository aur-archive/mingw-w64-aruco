diff -ur aruco-1.2.5.orig/CMakeLists.txt aruco-1.2.5/CMakeLists.txt
--- aruco-1.2.5.orig/CMakeLists.txt	2014-04-22 12:36:13.000000000 +0200
+++ aruco-1.2.5/CMakeLists.txt	2015-01-27 13:54:21.461242337 +0100
@@ -27,10 +27,9 @@
 if(WIN32)
     # Postfix of DLLs:
     SET(PROJECT_DLLVERSION "${PROJECT_VERSION_MAJOR}${PROJECT_VERSION_MINOR}${PROJECT_VERSION_PATCH}")
-    SET(CMAKE_INSTALL_PREFIX "${CMAKE_BINARY_DIR}")
     SET(RUNTIME_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin CACHE PATH "Directory for dlls and binaries")
     SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin CACHE PATH "Directory for binaries")
-    SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin CACHE PATH "Directory for dlls")
+    SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib CACHE PATH "Directory for dlls")
 else()
     # Postfix of so's:
     set(PROJECT_DLLVERSION)   
@@ -124,6 +123,17 @@
 set(EXTRA_EXE_LINKER_FLAGS_RELEASE "")
 set(EXTRA_EXE_LINKER_FLAGS_DEBUG "")
 
+if(MINGW AND "x${CMAKE_SYSTEM_PROCESSOR}" MATCHES "x")
+    execute_process(COMMAND ${CMAKE_C_COMPILER} -v
+                    ERROR_VARIABLE C_OUTPUT
+                    OUTPUT_QUIET)
+    if(${C_OUTPUT} MATCHES ".*Target: i686.*")
+        set(CMAKE_SYSTEM_PROCESSOR i686) 
+    elseif(${C_OUTPUT} MATCHES ".*Target: x86_64.*")
+        set(CMAKE_SYSTEM_PROCESSOR x86_64) 
+    endif()
+endif()
+
 IF(CMAKE_COMPILER_IS_GNUCXX OR MINGW)
     set(ENABLE_PROFILING 		OFF CACHE BOOL "Enable profiling in the GCC compiler (Add flags: -g -pg)")
     set(USE_OMIT_FRAME_POINTER 	ON CACHE BOOL "Enable -fomit-frame-pointer for GCC")
diff -ur aruco-1.2.5.orig/src/CMakeLists.txt aruco-1.2.5/src/CMakeLists.txt
--- aruco-1.2.5.orig/src/CMakeLists.txt	2010-11-19 10:00:27.000000000 +0100
+++ aruco-1.2.5/src/CMakeLists.txt	2015-01-27 17:32:43.663056446 +0100
@@ -15,7 +15,6 @@
 	VERSION ${PROJECT_VERSION}
 	SOVERSION ${PROJECT_SOVERSION}
 	CLEAN_DIRECT_OUTPUT 1 					# allow creating static and shared libs without conflicts
-	OUTPUT_NAME "${PROJECT_NAME}${PROJECT_DLLVERSION}" 	# avoid conflicts between library and binary target names
 )
 
 TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${REQUIRED_LIBRARIES})
